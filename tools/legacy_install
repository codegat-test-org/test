#!/bin/bash
set -x

module purge
#module load python/2.7.6
#module load python/2.7.6-matplotlib
module load python/2.7.11
module load python/2.7.11-matplotlib
#module load python/2.7.15
#module load python3/3.6.2

# TODO: Set conditionally
#PYTHON=python3
#PIP=pip3
PYTHON=python
PIP=pip

# TODO: getopts
PKG_NAME="payu"
PKG_VERSION=""
FORCE="y"

# System Environment
PROJECT_MODULEFILES="/apps/Modules/restricted-modulefiles/fp0"
#PROJECT_MODULEFILES="/apps/Modules/modulefiles"
PROJECT_APPS="/apps"

#PROJECT_ROOT="/projects/v45"
#PROJECT_MODULEFILES="${PROJECT_ROOT}/modules"
#PROJECT_APPS="${PROJECT_ROOT}/apps"

AUTHOR_UID=$(whoami)
MOD_AUTHOR=$(getent passwd ${AUTHOR_UID} | cut -d: -f5)
MOD_EMAIL=$(ldapsearch -LLL -x "(uid=${AUTHOR_UID})" mail | \
            grep -oP "(?<=mail: ).*$")

# Get package version (or use a custom version)
if [[ ! -n ${PKG_VERSION} ]]; then
    PKG_VERSION=$(${PYTHON} -c "print(__import__('${PKG_NAME}').__version__)")
fi

# Get application paths
PKG_ROOT="${PROJECT_APPS}/${PKG_NAME}/${PKG_VERSION}"
PKG_BIN="${PKG_ROOT}/bin"
PKG_LIB="${PKG_ROOT}/lib"

# Check if application is already installed
if [[ -d ${PKG_ROOT} && ! -n ${FORCE} ]]; then
    echo "There is already an application installed at ${PKG_ROOT}."
    exit -1
fi

rm -rf ${PKG_ROOT}
mkdir -p ${PKG_BIN}
mkdir -p ${PKG_LIB}

${PYTHON} --version
${PIP} --version

# First install importlib under 2.6
${PIP} install --no-cache-dir -t ${PKG_LIB} importlib

# Now setup a "modern" Python environment
module load python/2.7.15

#${PYTHON} setup.py install --prefix=${PKG_ROOT}

# TODO: Set source directory
${PYTHON} setup.py install_lib --install-dir ${PKG_LIB}
${PYTHON} setup.py install_scripts --install-dir ${PKG_BIN}
#${PYTHON} setup.py build_scripts \
#    --build-dir ${PKG_BIN} \
#    --executable $(which ${PYTHON})

# Install dependencies
${PIP} install --no-cache-dir -t ${PKG_LIB} python-dateutil
${PIP} install --no-cache-dir -t ${PKG_LIB} f90nml
${PIP} install --no-cache-dir -t ${PKG_LIB} pyyaml
${PIP} install --no-cache-dir -t ${PKG_LIB} requests[security]

# Generate the modulefile
PKG_APP_MODS=${PROJECT_MODULEFILES}/${PKG_NAME}
mkdir -p ${PKG_APP_MODS}

PKG_MOD=${PKG_APP_MODS}/${PKG_VERSION}
printf "#%%Module1.0\n" > ${PKG_MOD}
printf "# ${PKG_NAME} ${PKG_VERSION} environment module\n" >> ${PKG_MOD}
printf "\n" >> ${PKG_MOD}
printf "set install-contact \"${MOD_AUTHOR} <${MOD_EMAIL}>\"\n" >> ${PKG_MOD}
printf "set install-date \"$(date +%Y-%m-%d)\"\n" >> ${PKG_MOD}
printf "source /opt/Modules/extensions/extensions.tcl\n" >> ${PKG_MOD}
printf "docommon\n" >> ${PKG_MOD}

# Update default version
printf "#%%Module1.0\n" > ${PKG_APP_MODS}/.version
printf "set ModulesVersion ${PKG_VERSION}\n" >> ${PKG_APP_MODS}/.version

# Set permissions
chmod g=rwX ${PROJECT_APPS}/${PKG_NAME}
chmod o=rX ${PROJECT_APPS}/${PKG_NAME}

chgrp -R apps ${PKG_ROOT}
chmod -R g=rwX ${PKG_ROOT}
chmod -R o=rX ${PKG_ROOT}

chmod g=rwX ${PKG_APP_MODS}
chmod o=rX ${PKG_APP_MODS}

chgrp apps ${PKG_MOD}
chmod g=rwX ${PKG_MOD}
chmod o=rX ${PKG_MOD}
