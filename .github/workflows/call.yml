name: 'Comment Command: !test'
run-name: '!test on ${{ github.repository }}'
on:
  workflow_call:
  # Triggered by:
  # on:
  #   issue_comment:
  #     - edited
  #     - created
env:
  USAGE: '!test TYPE [commit]'
  USAGE_TYPES: repro
  RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
jobs:
  ci-config:
    name: Read CI Testing Configuration
    runs-on: ubuntu-latest
    outputs:
      markers: ${{ steps.repro-config.outputs.markers }}
      payu-version: ${{ steps.repro-config.outputs.payu-version }}
      model-config-tests-version: ${{ steps.repro-config.outputs.model-config-tests-version }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Validate `config/ci.json`
        uses: access-nri/schema/.github/actions/validate-with-schema@main
        with:
          # As with a lot of the `vars`/`secrets` in this repo, this will be defined in the caller repo
          schema-version: 2-0-0
          meta-schema-version: draft-2020-12
          schema-location: au.org.access-nri/model/configuration/ci
          data-location: config/ci.json

      - name: Get base branch for PR
        id: base
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          echo "branch=$(gh pr view --json baseRefName --jq '.baseRefName')"

      - name: Read reproducibility tests config
        id: repro-config
        uses: access-nri/model-config-tests/.github/actions/parse-ci-config@main
        with:
          check: reproducibility
          branch-or-tag: ${{ steps.base.outputs.branch }}
          config-filepath: "config/ci.json"

  prepare-command:
    name: Prepare Command
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      test-type: ${{ steps.test.outputs.type }}
      # the git hash of the configuration being tested
      config-hash: ${{ steps.pr.outputs.hash }}
      # the git ref (branch or tag) of the configuration being tested
      config-ref: ${{ steps.pr.outputs.ref }}
      # the git hash of the configuration being compared against
      compared-config-hash: ${{ steps.compared.outputs.hash }}
      # the git ref (branch or tag) of the configuration being compared against
      compared-config-ref: ${{ steps.compared.outputs.ref }}
      # whether the commenter can commit to the repo (either 'true', 'false' or '' (when no 'commit' option given))
      has-commit-permission: ${{ steps.commit.outputs.permission }}
      # TODO: Make this an input to the command when we start deploying to multiple targets
      environment-name: Gadi
    permissions:
      pull-requests: write
    steps:
      - name: React to '!test'
        uses: access-nri/actions/.github/actions/react-to-comment@main
        with:
          reaction: rocket
          token: ${{ github.token }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get log
        run: |
          git log --graph --decorate --format=format:'%C(bold magenta)%h%C(reset) - %C(bold blue)(%an, %ar) %C(white)%<|(-1,trunc)%s%C(auto)%+d' --all

      - name: Get test type
        id: test
        run: |
          command="${{ github.event.comment.body }}"
          read -ra command_tokens <<< "$command"
          type_in_comment="${command_tokens[1]}"
          type_in_comment_valid=false

          for type in ${{ env.USAGE_TYPES }}; do
            if [[ "$type_in_comment" == "$type" ]]; then
              type_in_comment_valid=true
              break
            fi
          done

          if [[ "$type_in_comment_valid" == "false" ]]; then
            echo "::error::The command '${{ github.event.comment.body }}' doesn't have a valid TYPE. Was given '$type_in_command', but needed to be one of: ${{ env.USAGE_TYPES }}."
            exit 1
          fi

          echo "type=$type_in_comment" >> $GITHUB_OUTPUT

      - name: Get config ref from PR comment
        id: pr
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "ref=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT

      - name: Get compared config ref
        id: compared
        # Set up a default ref
        run: |
          ref=$(gh pr view ${{ github.event.issue.number }} --json baseRefName --jq '.baseRefName')
          echo "$ref"
          hash=$(git merge-base --fork-point "origin/$ref" "origin/${{ steps.pr.outputs.ref }}")
          echo "$hash"
          echo "Using $hash (on $ref)"

          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "ref=$ref" >> $GITHUB_OUTPUT

      - name: Determine whether to commit
        id: commit
        # Determine whether the commenter can actually commit something to the repo if they write 'commit'
        # by getting their repo permissions.
        # TODO: The permissions-checking section seems ripe for turning into an action!
        run: |
          if [[ "${{ contains(github.event.comment.body, 'commit') }}" == "false" ]]; then
            echo "'commit' option not given"
            exit 0
          fi

          commenter_permissions=$(gh api /
              repos/${{ github.repository }}/collaborators/${{ github.event.comment.user.login }}/permission
              --jq '.permission'
          )
          if [[ "$commenter_permission" == "admin" || "$commenter_permission" == "write" ]]; then
            echo "'commit' option given and commenter has at least write permission"
            echo "permission=true" >> $GITHUB_OUTPUT
          else
            echo "'commit' option given but commenter does not have at least write permission"
            echo "permission=false" >> $GITHUB_OUTPUT
          fi

  repro:
    name: Compare ${{ needs.prepare-command.outputs.config-ref }} against ${{ needs.prepare-command.outputs.compared-config-ref }}
    needs:
      - prepare-command
      - ci-config
    if: needs.prepare-command.outputs.test-type == 'repro'
    runs-on: ubuntu-latest
    outputs:
      artifact-name: wowee
      artifact-url: ${{ steps.upload.outputs.artifact-url }}
      experiment-location: /some/place/that/dont/exist
    steps:
      - name: DEBUG - running repro
        run: |
          echo "Running Repro Stuff"

      - uses: actions/checkout@v4

      - env:
          GH_TOKEN: ${{ github.token }}
        run: gh pr checkout ${{ github.event.issue.number }}

      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: wowee
          path: ./artifact
    # uses: access-nri/model-config-tests/.github/workflows/test-repro.yml@main
    # with:
    #   config-ref: ${{ needs.prepare-command.outputs.config-hash }}
    #   compared-config-ref: ${{ needs.prepare-command.outputs.compared-config-hash }}
    #   environment-name: ${{ needs.prepare-command.outputs.environment-name }}
    #   payu-version: ${{ needs.ci-config.outputs.payu-version }}
    #   model-config-tests-version: ${{ needs.ci-config.outputs.model-config-tests-version }}
    #   test-markers: ${{ needs.ci-config.outputs.markers }}
    # secrets: inherit
    # permissions:
    #   contents: write

  check-repro:
    # Parse the test report and return pass/fail result
    name: Results
    needs:
      - prepare-command
      - repro
    runs-on: ubuntu-latest
    env:
      TESTING_LOCAL_LOCATION: /opt/testing
    permissions:
      checks: write
    steps:
      - name: Download Newly Created Checksum
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.repro.outputs.artifact-name }}
          path: ${{ env.TESTING_LOCAL_LOCATION }}

      - run: tree ${{ env.TESTING_LOCAL_LOCATION }}

      - name: Parse Test Report
        id: tests
        uses: EnricoMi/publish-unit-test-result-action/composite@e780361cd1fc1b1a170624547b3ffda64787d365  #v2.12.0
        with:
          files: ${{ env.TESTING_LOCAL_LOCATION }}/checksum/test_report.xml
          comment_mode: off
          check_run: true
          compare_to_earlier_commit: false
          report_individual_runs: true
          report_suite_logs: any

      - name: Repro results
        id: results
        run: |
          echo "check-url=${{ fromJson(steps.tests.outputs.json).check_url }}" >> $GITHUB_OUTPUT

          if (( ${{ fromJson(steps.tests.outputs.json).stats.tests_fail }} > 0 )); then
            echo "result=fail" >> $GITHUB_OUTPUT
          else
            echo "result=pass" >> $GITHUB_OUTPUT
          fi

      - name: Comment result
        env:
          COMPARED_REF: ${{ needs.prepare-command.outputs.compared-config-ref != '' && format('(on branch `{0}`)', needs.prepare-command.outputs.compared-config-ref) || '' }}
          RESULT: |-
            ${{ steps.results.outputs.result == 'pass' && ':white_check_mark: The Bitwise Reproducibility Check Succeeded :white_check_mark:' || ':x: The Bitwise Reproducibility Check Failed :x:' }}
          COMMIT_RESULT: |-
            ${{ needs.prepare-command.outputs.has-commit-permission == 'true' && ':wrench: This result has been committed to this PR, if it differs from the current `HEAD`' || ':warning: This result is not being committed to this PR, as the commenter does not have `write` permissions' }}
        uses: access-nri/actions/.github/actions/pr-comment@main
        with:
          comment: |
            ${{ env.RESULT }}
            When comparing:

            - `${{ needs.prepare-command.outputs.config-hash }}` (on branch `${{ needs.prepare-command.outputs.config-ref }}`), against
            - `${{ needs.prepare-command.outputs.compared-config-hash }}` ${{ env.COMPARED_REF }}

            ${{ needs.prepare-command.outputs.has-commit-permission != '' && env.COMMIT_RESULT || '' }}

            <details>
            <summary> Further information</summary>

            The experiment can be found on Gadi at `${{ needs.repro.outputs.experiment-location }}`, and the test results at ${{ steps.results.outputs.check-run-url }}.

            The checksums generated by this `!repro` command are found in the `testing/checksum` directory of ${{ needs.repro.outputs.artifact-url }}.

            The checksums compared against are found here ${{ github.server_url }}/${{ github.repository }}/tree/${{ needs.prepare-command.outputs.compared-config-hash }}/testing/checksum

            </details>

  commit:
    name: Commit Result
    if: needs.prepare-command.outputs.has-commit-permission == 'true'
    needs:
      - prepare-command
      - repro
      - check-repro
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      ARTIFACT_LOCAL_LOCATION: /opt/artifact
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_COMMIT_CHECK_TOKEN }}

      - name: Checkout Associated PR ${{ github.event.issue.number }}
        # Since the trigger for this workflow was on.issue_comment, we need
        # to do a bit more wrangling to checkout the pull request
        run: gh pr checkout ${{ github.event.issue.number }}

      - name: Download Newly Created Checksum
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.repro.outputs.artifact-name }}
          path: ${{ env.ARTIFACT_LOCAL_LOCATION }}

      - name: Update files
        # This will copy checksums from the artifact to the repo
        run: |
          cp --recursive --verbose ${{ env.ARTIFACT_LOCAL_LOCATION }}/*/* testing

      # - name: Import Commit-Signing Key
      #   uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4  # v6.1.0
      #   with:
      #     gpg_private_key: ${{ secrets.GH_ACTIONS_BOT_GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GH_ACTIONS_BOT_GPG_PASSPHRASE }}
      #     git_config_global: true
      #     git_committer_name: ${{ vars.GH_ACTIONS_BOT_GIT_USER_NAME }}
      #     git_committer_email: ${{ vars.GH_ACTIONS_BOT_GIT_USER_EMAIL }}
      #     git_user_signingkey: true
      #     git_commit_gpgsign: true
      #     git_tag_gpgsign: true

      - name: Commit and Push Updates
        run: |
          git add .
          git commit -m "Updated checksums as part of ${{ env.RUN_URL }}"
          git push

  failure-notifier:
    name: Notify PR of Workflow Failure
    needs:
      - check-repro
      - commit
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - uses: access-nri/actions/.github/actions/pr-comment@main
        with:
          comment: |
            :x: `!test` Command Failed. See ${{ env.RUN_URL }} :x:
