name: Multiline
# Validate schemas modified in an pull request or push against their given meta-schema (such as draft-07, etc.)
on:
  workflow_dispatch:
    inputs:
      env:
        type: string
        default: Gadi
      type:
        type: string
        default: Release
jobs:
  multiline:
    runs-on: ubuntu-latest
    env:
      CONFIG_SETTINGS_PATH: config/settings.json
    steps:
      - uses: actions/checkout@v4

      - name: Setup spack updates
        id: spack
        # TODO: Since we can't format any of this later json as an input for this job (see the earlier workflow) we need to do it here
        # Create a newline-separated list of strings of the form "MAJOR_VERSION COMMIT_HASH" so we
        # update the remotes MAJOR_VERSION/spack to COMMIT_HASH. Ex: "0.20 y7834gtbf3jf3434rr34r34ru"
        run: |
          updates=$(jq --compact-output --raw-output \
            --arg env "${{ inputs.env }}" \
            --arg type "${{ inputs.type }}" \
            '.deployment[$env][$type] | to_entries[] | "\(.key) \(.value.spack)"' \
            ${{ env.CONFIG_SETTINGS_PATH }}
          )

          echo "$updates"
          echo "updates<<EOF" >> $GITHUB_OUTPUT
          echo "$updates" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update spack
        run: |
          while read -ra update; do
            version=${update[0]}
            new_commit=${update[1]}
            echo "$version and then $new_commit"
          done <<< "${{ steps.spack.outputs.updates }}"

  nonmultiline:
    runs-on: ubuntu-latest
    env:
      CONFIG_SETTINGS_PATH: config/settings.json
    steps:
      - uses: actions/checkout@v4

      - name: Setup spack updates
        id: spack
        # TODO: Since we can't format any of this later json as an input for this job (see the earlier workflow) we need to do it here
        # Create a newline-separated list of strings of the form "MAJOR_VERSION COMMIT_HASH" so we
        # update the remotes MAJOR_VERSION/spack to COMMIT_HASH. Ex: "0.20 y7834gtbf3jf3434rr34r34ru"
        run: |
          updates=$(jq --compact-output --raw-output \
            --arg env "${{ inputs.env }}" \
            --arg type "${{ inputs.type }}" \
            '.deployment[$env][$type] | to_entries[] | "\(.key) \(.value.spack)"' \
            ${{ env.CONFIG_SETTINGS_PATH }}
          )

          echo "$updates"
          echo "updates=$updates" >> $GITHUB_OUTPUT

      - name: Update spack
        run: |
          while read -ra update; do
            version=${update[0]}
            new_commit=${update[1]}
            echo "$version and then $new_commit"
          done <<< "${{ steps.spack.outputs.updates }}"
